// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShuttleZone.Infrastructure.Data;

#nullable disable

namespace ShuttleZone.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240626022637_UpdateUserPackage")]
    partial class UpdateUserPackage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("ClubAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClubStatusEnum")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MinDuration")
                        .HasColumnType("float");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Club", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a20240f-c00e-4d1d-9928-7bfc309ff6ce"),
                            CloseTime = new TimeOnly(22, 0, 0),
                            ClubAddress = "123 Main St",
                            ClubDescription = "A premier fitness club.",
                            ClubName = "Fitness Club A",
                            ClubPhone = "555-1234",
                            ClubStatusEnum = 2,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2820),
                            CreatedBy = "Admin",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2820),
                            LastModifiedBy = "Admin",
                            MinDuration = 1.5,
                            OpenTime = new TimeOnly(6, 0, 0),
                            OwnerId = new Guid("40e8ca6a-06c0-4deb-8bec-c3919817b8cf")
                        },
                        new
                        {
                            Id = new Guid("6eeed43c-ec69-49ab-8177-b20d1c7a7603"),
                            CloseTime = new TimeOnly(20, 0, 0),
                            ClubAddress = "456 Elm St",
                            ClubDescription = "A relaxing yoga center.",
                            ClubName = "Yoga Center B",
                            ClubPhone = "555-5678",
                            ClubStatusEnum = 1,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2830),
                            CreatedBy = "Admin",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2830),
                            LastModifiedBy = "Admin",
                            MinDuration = 1.0,
                            OpenTime = new TimeOnly(5, 0, 0),
                            OwnerId = new Guid("626d577c-5966-4993-afb8-72e672d16649")
                        },
                        new
                        {
                            Id = new Guid("50d33a54-9a35-4058-b548-dbc5e35d05aa"),
                            CloseTime = new TimeOnly(21, 0, 0),
                            ClubAddress = "789 Oak St",
                            ClubDescription = "A vibrant dance studio.",
                            ClubName = "Dance Studio C",
                            ClubPhone = "555-9012",
                            ClubStatusEnum = 2,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2840),
                            CreatedBy = "Admin",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2840),
                            LastModifiedBy = "Admin",
                            MinDuration = 2.0,
                            OpenTime = new TimeOnly(8, 0, 0),
                            OwnerId = new Guid("40e8ca6a-06c0-4deb-8bec-c3919817b8cf")
                        },
                        new
                        {
                            Id = new Guid("1c9e8457-4a2d-4b93-b71b-1b6876cbcf78"),
                            CloseTime = new TimeOnly(21, 0, 0),
                            ClubAddress = "456 Oak Ave",
                            ClubDescription = "A state-of-the-art health club.",
                            ClubName = "Health Club B",
                            ClubPhone = "555-5678",
                            ClubStatusEnum = 1,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2850),
                            CreatedBy = "Admin",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2850),
                            LastModifiedBy = "Admin",
                            MinDuration = 1.0,
                            OpenTime = new TimeOnly(5, 30, 0),
                            OwnerId = new Guid("626d577c-5966-4993-afb8-72e672d16649")
                        },
                        new
                        {
                            Id = new Guid("3d7a6244-e920-4e9e-9e97-5c6f0a5d539e"),
                            CloseTime = new TimeOnly(20, 0, 0),
                            ClubAddress = "789 Pine St",
                            ClubDescription = "A peaceful yoga center.",
                            ClubName = "Yoga Center C",
                            ClubPhone = "555-7890",
                            ClubStatusEnum = 2,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2860),
                            CreatedBy = "Admin",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2860),
                            LastModifiedBy = "Admin",
                            MinDuration = 2.0,
                            OpenTime = new TimeOnly(7, 0, 0),
                            OwnerId = new Guid("626d577c-5966-4993-afb8-72e672d16649")
                        },
                        new
                        {
                            Id = new Guid("7ac14b60-7e89-4e2a-a6ad-6ff6de3d88e7"),
                            CloseTime = new TimeOnly(22, 30, 0),
                            ClubAddress = "321 Elm St",
                            ClubDescription = "A club with excellent swimming facilities.",
                            ClubName = "Swimming Club D",
                            ClubPhone = "555-3210",
                            ClubStatusEnum = 2,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2870),
                            CreatedBy = "Admin",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 179, DateTimeKind.Local).AddTicks(2870),
                            LastModifiedBy = "Admin",
                            MinDuration = 1.5,
                            OpenTime = new TimeOnly(6, 30, 0),
                            OwnerId = new Guid("40e8ca6a-06c0-4deb-8bec-c3919817b8cf")
                        });
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.ClubImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubImage");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ContestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContestStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPlayer")
                        .HasColumnType("int");

                    b.Property<string>("Policy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contest");

                    b.HasData(
                        new
                        {
                            Id = new Guid("851e80b3-c3d3-4f1d-b5d8-462cab592b84"),
                            ContestDate = new DateTime(2024, 6, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            ContestStatus = 1,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 180, DateTimeKind.Local).AddTicks(2270),
                            CreatedBy = "John Doe",
                            MaxPlayer = 8,
                            Policy = "Follow the rules"
                        },
                        new
                        {
                            Id = new Guid("3d6e11e2-8914-495b-b3d7-798960a5fe91"),
                            ContestDate = new DateTime(2024, 6, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            ContestStatus = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 180, DateTimeKind.Local).AddTicks(2280),
                            CreatedBy = "Jane Smith",
                            MaxPlayer = 10,
                            Policy = "No cheating allowed"
                        });
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Court", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CourtStatus")
                        .HasColumnType("int");

                    b.Property<int>("CourtType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("Court");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e47d75fe-d045-4149-9b14-0cff4a752893"),
                            ClubId = new Guid("8a20240f-c00e-4d1d-9928-7bfc309ff6ce"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5010),
                            CreatedBy = "Club Owner 1",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5010),
                            LastModifiedBy = "Admin",
                            Name = "Court 1",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("76041fef-7c1b-4f62-ac5a-f372d1b3052f"),
                            ClubId = new Guid("8a20240f-c00e-4d1d-9928-7bfc309ff6ce"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5010),
                            CreatedBy = "Club Owner 1",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5010),
                            LastModifiedBy = "Admin",
                            Name = "Court 2",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("79943c0e-ac30-4f0c-b1a3-f178f8a4669a"),
                            ClubId = new Guid("8a20240f-c00e-4d1d-9928-7bfc309ff6ce"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5020),
                            CreatedBy = "Club Owner 1",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5020),
                            LastModifiedBy = "Admin",
                            Name = "Court 3",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("472b9b48-30d2-4f3e-a01f-527db703525b"),
                            ClubId = new Guid("8a20240f-c00e-4d1d-9928-7bfc309ff6ce"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5020),
                            CreatedBy = "Club Owner 1",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5020),
                            LastModifiedBy = "Admin",
                            Name = "Court 4",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("ac15834d-74a2-463c-81ce-22400a1048f9"),
                            ClubId = new Guid("6eeed43c-ec69-49ab-8177-b20d1c7a7603"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5020),
                            CreatedBy = "Club Owner 2",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5030),
                            LastModifiedBy = "Admin",
                            Name = "Court 1",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("a3b5853b-f556-4a52-a1cf-4a3fb81db29a"),
                            ClubId = new Guid("6eeed43c-ec69-49ab-8177-b20d1c7a7603"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5030),
                            CreatedBy = "Club Owner 2",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5030),
                            LastModifiedBy = "Admin",
                            Name = "Court 2",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("94a75cc3-7553-4281-b527-107f6f4369c5"),
                            ClubId = new Guid("6eeed43c-ec69-49ab-8177-b20d1c7a7603"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5030),
                            CreatedBy = "Club Owner 2",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5030),
                            LastModifiedBy = "Admin",
                            Name = "Court 3",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("aa35cace-23a6-4ab8-98a4-6de2d1e32343"),
                            ClubId = new Guid("6eeed43c-ec69-49ab-8177-b20d1c7a7603"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5040),
                            CreatedBy = "Club Owner 2",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5040),
                            LastModifiedBy = "Admin",
                            Name = "Court 4",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("0190f7af-7f12-4a65-98b8-d034ae7be529"),
                            ClubId = new Guid("50d33a54-9a35-4058-b548-dbc5e35d05aa"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5040),
                            CreatedBy = "Club Owner 3",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5040),
                            LastModifiedBy = "Admin",
                            Name = "Court 1",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("abdd9e0b-de08-422b-894d-64f22365c583"),
                            ClubId = new Guid("50d33a54-9a35-4058-b548-dbc5e35d05aa"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5050),
                            CreatedBy = "Club Owner 3",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5050),
                            LastModifiedBy = "Admin",
                            Name = "Court 2",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("6699976f-f3ca-42a0-9948-41fae24efa03"),
                            ClubId = new Guid("50d33a54-9a35-4058-b548-dbc5e35d05aa"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5050),
                            CreatedBy = "Club Owner 3",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5050),
                            LastModifiedBy = "Admin",
                            Name = "Court 3",
                            Price = 100.0
                        },
                        new
                        {
                            Id = new Guid("189df8e4-c3e1-48b4-b765-56f89f1f7d9e"),
                            ClubId = new Guid("50d33a54-9a35-4058-b548-dbc5e35d05aa"),
                            CourtStatus = 0,
                            CourtType = 0,
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5060),
                            CreatedBy = "Club Owner 3",
                            LastModified = new DateTime(2024, 6, 26, 9, 26, 37, 181, DateTimeKind.Local).AddTicks(5060),
                            LastModifiedBy = "Admin",
                            Name = "Court 4",
                            Price = 100.0
                        });
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Maintenance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("Maintenance");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d3476e2-526b-4a65-89f8-9561981c947e"),
                            CourtId = new Guid("a3b5853b-f556-4a52-a1cf-4a3fb81db29a"),
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 182, DateTimeKind.Local).AddTicks(7370),
                            CreatedBy = "Admin",
                            EndTime = new DateTime(2024, 6, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            Reason = "Out of service",
                            StartTime = new DateTime(2024, 6, 26, 9, 26, 37, 182, DateTimeKind.Local).AddTicks(7360)
                        },
                        new
                        {
                            Id = new Guid("02d759bf-9408-452f-b920-359df87a0fac"),
                            CourtId = new Guid("ac15834d-74a2-463c-81ce-22400a1048f9"),
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 182, DateTimeKind.Local).AddTicks(7370),
                            CreatedBy = "Admin",
                            EndTime = new DateTime(2024, 6, 26, 0, 0, 0, 0, DateTimeKind.Local),
                            Reason = "Out of service 2",
                            StartTime = new DateTime(2024, 6, 26, 9, 26, 37, 182, DateTimeKind.Local).AddTicks(7370)
                        });
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.OpenDateInWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("OpenDateInWeek");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackageStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Package");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.PackageUser", b =>
                {
                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PackageUserStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PackageId", "UserId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("PackageUser");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ContestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservationStatusEnum")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ContestId")
                        .IsUnique()
                        .HasFilter("[ContestId] IS NOT NULL");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.ReservationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CourtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ReservationDetailStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationDetail");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClubId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReplyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplyPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReplyTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplyTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Review", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("83196436-d386-48b4-bfac-d5b08d8cf604"),
                            ClubId = new Guid("8a20240f-c00e-4d1d-9928-7bfc309ff6ce"),
                            Comment = "Good",
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 186, DateTimeKind.Local).AddTicks(6400),
                            CreatedBy = "John doe",
                            Rating = 0,
                            ReplyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewerId = new Guid("a37b04c6-bd58-48e7-8bab-1bbb207f6216")
                        },
                        new
                        {
                            Id = new Guid("c5ee94c7-6fee-4af0-b4b3-07b17fd87325"),
                            ClubId = new Guid("8a20240f-c00e-4d1d-9928-7bfc309ff6ce"),
                            Comment = "Bad",
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 186, DateTimeKind.Local).AddTicks(6410),
                            CreatedBy = "John doe",
                            Rating = 0,
                            ReplyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewerId = new Guid("a37b04c6-bd58-48e7-8bab-1bbb207f6216")
                        },
                        new
                        {
                            Id = new Guid("fde0842b-3182-432a-b567-1c4aad77bac9"),
                            ClubId = new Guid("8a20240f-c00e-4d1d-9928-7bfc309ff6ce"),
                            Comment = "Fair Well",
                            Created = new DateTime(2024, 6, 26, 9, 26, 37, 186, DateTimeKind.Local).AddTicks(6410),
                            CreatedBy = "John doe",
                            Rating = 0,
                            ReplyTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReviewerId = new Guid("a37b04c6-bd58-48e7-8bab-1bbb207f6216")
                        });
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d319181e-4973-4ecb-ba60-a1b11adfa203"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("595ecaaa-d27e-4246-b40a-a216f2db5bde"),
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("7abbbeb6-a451-499e-89da-8e0bc4ce914b"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("c5e81a66-2e69-4c31-ba05-f24296593091"),
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.Property<string>("TxnRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserStatusEnum")
                        .HasColumnType("int");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a37b04c6-bd58-48e7-8bab-1bbb207f6216"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency1",
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            Fullname = "John Doe",
                            Gender = 1,
                            LockoutEnabled = true,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN.DOE",
                            PasswordHash = "hashedpassword1",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "stamp1",
                            TwoFactorEnabled = true,
                            UserName = "john.doe",
                            UserStatusEnum = 0,
                            WalletId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("26a7cc4e-3f9b-4923-809e-2f9b771d994f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency1",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            Fullname = "Jane Smith",
                            Gender = 1,
                            LockoutEnabled = true,
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE.SMITH",
                            PasswordHash = "hashedpassword1",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "stamp1",
                            TwoFactorEnabled = true,
                            UserName = "jane.smith",
                            UserStatusEnum = 0,
                            WalletId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("40e8ca6a-06c0-4deb-8bec-c3919817b8cf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency2",
                            Email = "owner.club.1@example.com",
                            EmailConfirmed = true,
                            Fullname = "Owner Club 1",
                            Gender = 2,
                            LockoutEnabled = true,
                            NormalizedEmail = "OWNER.CLUB.1@EXAMPLE.COM",
                            NormalizedUserName = "OWNER.CLUB.1",
                            PasswordHash = "hashedpassword2",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "stamp2",
                            TwoFactorEnabled = true,
                            UserName = "owner.club.1",
                            UserStatusEnum = 0,
                            WalletId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("626d577c-5966-4993-afb8-72e672d16649"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "concurrency2",
                            Email = "owner.club.2@example.com",
                            EmailConfirmed = true,
                            Fullname = "Owner Club 2",
                            Gender = 2,
                            LockoutEnabled = true,
                            NormalizedEmail = "OWNER.CLUB.2@EXAMPLE.COM",
                            NormalizedUserName = "OWNER.CLUB.2",
                            PasswordHash = "hashedpassword2",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "stamp2",
                            TwoFactorEnabled = true,
                            UserName = "owner.club.2",
                            UserStatusEnum = 1,
                            WalletId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.UserContest", b =>
                {
                    b.Property<Guid>("ContestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<bool>("isCreatedPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("isWinner")
                        .HasColumnType("bit");

                    b.HasKey("ContestId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("UserContest");

                    b.HasData(
                        new
                        {
                            ContestId = new Guid("851e80b3-c3d3-4f1d-b5d8-462cab592b84"),
                            ParticipantsId = new Guid("a37b04c6-bd58-48e7-8bab-1bbb207f6216"),
                            Point = 8,
                            isCreatedPerson = true,
                            isWinner = false
                        },
                        new
                        {
                            ContestId = new Guid("851e80b3-c3d3-4f1d-b5d8-462cab592b84"),
                            ParticipantsId = new Guid("26a7cc4e-3f9b-4923-809e-2f9b771d994f"),
                            Point = 10,
                            isCreatedPerson = false,
                            isWinner = true
                        });
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Club", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.User", "Owner")
                        .WithMany("Clubs")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.ClubImage", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Club", "Club")
                        .WithMany("ClubImages")
                        .HasForeignKey("ClubId");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Court", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Club", "Club")
                        .WithMany("Courts")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Maintenance", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Court", "Court")
                        .WithMany("Maintenances")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.OpenDateInWeek", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Club", "Club")
                        .WithMany("OpenDateInWeeks")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.PackageUser", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Package", "Package")
                        .WithMany("PackageUser")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleZone.Domain.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleZone.Domain.Entities.User", "User")
                        .WithMany("PackageUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Contest", "Contest")
                        .WithOne("Reservation")
                        .HasForeignKey("ShuttleZone.Domain.Entities.Reservation", "ContestId");

                    b.HasOne("ShuttleZone.Domain.Entities.User", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.ReservationDetail", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Court", "Court")
                        .WithMany("ReservationDetails")
                        .HasForeignKey("CourtId");

                    b.HasOne("ShuttleZone.Domain.Entities.Reservation", "Reservation")
                        .WithMany("ReservationDetails")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Review", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Club", "Club")
                        .WithMany("Reviews")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleZone.Domain.Entities.User", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Reservation", "Reservation")
                        .WithMany("Transactions")
                        .HasForeignKey("ReservationId");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.UserContest", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Contest", "Contest")
                        .WithMany("UserContests")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleZone.Domain.Entities.User", "Participant")
                        .WithMany("UserContests")
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.Role", "Role")
                        .WithMany("Roles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShuttleZone.Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("ShuttleZone.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("ShuttleZone.Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Club", b =>
                {
                    b.Navigation("ClubImages");

                    b.Navigation("Courts");

                    b.Navigation("OpenDateInWeeks");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Contest", b =>
                {
                    b.Navigation("Reservation");

                    b.Navigation("UserContests");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Court", b =>
                {
                    b.Navigation("Maintenances");

                    b.Navigation("ReservationDetails");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Package", b =>
                {
                    b.Navigation("PackageUser");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Reservation", b =>
                {
                    b.Navigation("ReservationDetails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.Role", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ShuttleZone.Domain.Entities.User", b =>
                {
                    b.Navigation("Clubs");

                    b.Navigation("PackageUsers");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("Roles");

                    b.Navigation("UserContests");

                    b.Navigation("Wallet");
                });
#pragma warning restore 612, 618
        }
    }
}
